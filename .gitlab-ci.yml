default:
  retry: 1
  interruptible: true

variables:
  GIT_DEPTH: 5
  GITHUB_TOKEN: $GITHUB_TOKEN
  DOCKER_DRIVER: overlay2
  REPOSITORY_NAME: credit-package
  MASTER_REPO_NAMESPACE: 'navyx/bxpay'

stages:
  - package

.default_rules:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

build_image:
  stage: package
  image:
    name: $AWS_ECR_REGISTRY/aws-cli-docker:latest
    entrypoint: [""]
  before_script:
    - apk add --no-cache git
  script:
    - git fetch --all --tags > /dev/null
    - git tag -l | grep ^build/ | grep -o -E '[0-9]+$' | sort -n | tail -n1
    - LAST_BUILD=$(git tag -l | grep ^build/ | grep -o -E '[0-9]+$' | sort -n | tail -n1; exit 0)    
    - >
      if [ "$CI_COMMIT_BRANCH" = "main" -o "$CI_COMMIT_BRANCH" = "master" ];
      then BUILD_PREFIX="prod"; CDN_BUCKET='bluex-static-files';
      else BUILD_PREFIX=$CI_COMMIT_BRANCH; CDN_BUCKET='bluex-static-files-dev';
      fi
    - NEXT_BUILD="$BUILD_PREFIX-$((LAST_BUILD + 1))"
    - NEW_TAG="build/$NEXT_BUILD"
    ## Tag build number
    - echo "Last Build is $LAST_BUILD, New Tag is $NEW_TAG"
    - >
      curl --request POST --header "PRIVATE-TOKEN: $GITLAB_GROUP_ACCESS_TOKEN"
      --silent --output /dev/null --show-error --fail
      "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/repository/tags?tag_name=$NEW_TAG&ref=$CI_COMMIT_SHA"
    - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
    ## build docker image and push to ECR
    - CLIENT_PACKAGE_SIG=$(cat client/package.json | md5sum | cut -d' ' -f1)
    - SERVER_PACKAGE_SIG=$(cat server/package.json | md5sum | cut -d' ' -f1)
    - >
      if [ "$BUILD_PREFIX" = "prod" ];
      then BUILD_AWS_ACCESS_KEY_ID=$PROD_AWS_ACCESS_KEY_ID; BUILD_AWS_SECRET_ACCESS_KEY=$PROD_AWS_SECRET_ACCESS_KEY;
      else BUILD_AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID; BUILD_AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY;
      fi
    - >
      docker build --build-arg BUILDNO=$NEXT_BUILD --build-arg CDN_BUCKET=$CDN_BUCKET --build-arg REV=$(git log -n 1 --pretty=format:'%h')
      --build-arg AWS_ACCESS_KEY_ID=$BUILD_AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$BUILD_AWS_SECRET_ACCESS_KEY
      --build-arg AWS_ECR_REGISTRY=$AWS_ECR_REGISTRY --build-arg CLIENT_PACKAGE_SIG=$CLIENT_PACKAGE_SIG --build-arg SERVER_PACKAGE_SIG=$SERVER_PACKAGE_SIG
      -t $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$NEXT_BUILD .
    - docker push $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$NEXT_BUILD
    - if [ "$CI_COMMIT_BRANCH" == "dev" ]; then docker tag $AWS_ECR_REGISTRY/$REPOSITORY_NAME:$NEXT_BUILD $AWS_ECR_REGISTRY/$REPOSITORY_NAME:latest; docker push $AWS_ECR_REGISTRY/$REPOSITORY_NAME:latest; fi
    ## send build tracking
    - LAST_TAG=$(git tag -l | grep -E "\-$LAST_BUILD$")
    - echo "Get logs between $LAST_TAG and $NEW_TAG"
    - if [ -z "$LAST_TAG" ]; then LOG_RANGE="HEAD"; else LOG_RANGE="$LAST_TAG..HEAD"; fi
    - INFO=$(git log "$LOG_RANGE" --pretty=format:"[%ad %an %h] %s" --date=iso)
    - ENCODED_INFO=$(printf "%s\n" "$INFO" | jq -sRr @uri)
    - echo $ENCODED_INFO
    - >
      curl -X POST -H "Content-Type: application/x-www-form-urlencoded"
      --silent --output /dev/null --show-error --fail
      "https://buildtracking.bluex.trade/component"
      -d "component_name=$REPOSITORY_NAME&build_number=$NEXT_BUILD&build_info=$ENCODED_INFO"
    ## store build info
    - echo "BUILDNO=$NEXT_BUILD" > build.env
    - echo "NEW_TAG=$NEW_TAG" >> build.env
    - echo "BUILD_PREFIX=$BUILD_PREFIX" >> build.env
  rules:
    - if: '$BUILD_BASE_IMAGE'
      when: never
    - if: '$RUN_DEPSCAN'
      when: never
    - if: '$CI_PROJECT_NAMESPACE == $MASTER_REPO_NAMESPACE && $CI_COMMIT_BRANCH =~ /dev|master|main|hotfix/'
